//
//  NearByPlacesViewController.swift
//  NearBy
//
//  Created by Heba on 4/18/20.
//  Copyright (c) 2020 Cognitev. All rights reserved.
//
//  This file was generated by the Clean Swift Xcode Templates so
//  you can apply clean architecture to your iOS and Mac projects,
//  see http://clean-swift.com
//

import UIKit
import Rswift

protocol NearByPlacesDisplayLogic: class {
    func display(places: [NearByPlaces.ViewModel.Place])
    func display(trackingMood: String)
    func display(blankSlate: NearByPlaces.ViewModel.BlankSlate)
}

class NearByPlacesViewController: UIViewController, NearByPlacesDisplayLogic {
    var interactor: NearByPlacesBusinessLogic?
    var router: (NSObjectProtocol & NearByPlacesRoutingLogic & NearByPlacesDataPassing)?
    var places: [NearByPlaces.ViewModel.Place] = []
    
    private let loadingView = LoadingView.instanceFromNib()
    private let blankSlateView = BlankSlateView.instanceFromNib()
    
    @IBOutlet weak var placesTableView: UITableView!
    @IBOutlet weak var moodSwitchLabel: UIBarButtonItem!
    @IBOutlet weak var placesView: UIView!
    
    // MARK: Object lifecycle
    override init(nibName nibNameOrNil: String?, bundle nibBundleOrNil: Bundle?) {
        super.init(nibName: nibNameOrNil, bundle: nibBundleOrNil)
        setup()
    }
    
    required init?(coder aDecoder: NSCoder) {
        super.init(coder: aDecoder)
        setup()
    }
    
    // MARK: Setup
    private func setup() {
        let viewController = self
        let interactor = NearByPlacesInteractor()
        let presenter = NearByPlacesPresenter()
        let router = NearByPlacesRouter()
        viewController.interactor = interactor
        viewController.router = router
        interactor.presenter = presenter
        presenter.viewController = viewController
        router.viewController = viewController
        router.dataStore = interactor
    }
    
    // MARK: View lifecycle
    override func viewDidLoad() {
        super.viewDidLoad()
        
        displayLoadingView()

        interactor?.loadTrackingMood()
    }
    
    @IBAction func moodSwitchPressed(_ sender: UIBarButtonItem) {
        interactor?.switchTrackingMood()
    }
    
    func display(places: [NearByPlaces.ViewModel.Place]) {
        self.places = places
        
        loadingView.removeFromSuperview()
        blankSlateView.removeFromSuperview()
        
        self.placesTableView.reloadData()
    }
    
    func display(trackingMood: String) {
        moodSwitchLabel.title = trackingMood
    }
    
    func display(blankSlate: NearByPlaces.ViewModel.BlankSlate) {
        let frame = setFrame()
        
        blankSlateView.image.image = UIImage(named: blankSlate.image)
        blankSlateView.title.text = blankSlate.description
        
        view.frame = frame
        
        placesView.addSubview(view)
    }
    
    private func style() {
        placesTableView.separatorInset = UIEdgeInsets(top: 0, left: 0, bottom: 0, right: 0)
    }
    
    private func displayLoadingView() {
        let frame = setFrame()
        
        loadingView.frame = frame
        
        placesView.addSubview(loadingView)
    }
    
    private func setFrame() -> CGRect {
        let frame = CGRect(
            x: 0.0,
            y: 0.0,
            width: placesView.frame.size.width,
            height: placesView.frame.size.height
        )
        
        return frame
    }
}

// MARK: - Table view data source
extension NearByPlacesViewController: UITableViewDelegate, UITableViewDataSource {
    func tableView(_ tableView: UITableView, numberOfRowsInSection section: Int) -> Int {
        return self.places.count
    }
    
    func tableView(_ tableView: UITableView, cellForRowAt indexPath: IndexPath) -> UITableViewCell {
        let cell = tableView.dequeueReusableCell(withIdentifier: R.reuseIdentifier.placesCell, for: indexPath)!
        
        let loadImageTask = interactor?.loadImageTask(for: self.places[indexPath.row].id)
        cell.configureWith(place: self.places[indexPath.row], loadImageTask: loadImageTask)
        
        return cell
    }
}
