//
//  NearByPlacesInteractor.swift
//  NearBy
//
//  Created by Heba on 4/18/20.
//  Copyright (c) 2020 Cognitev. All rights reserved.
//
//  This file was generated by the Clean Swift Xcode Templates so
//  you can apply clean architecture to your iOS and Mac projects,
//  see http://clean-swift.com
//

import UIKit
import CoreLocation
import RxSwift

protocol NearByPlacesBusinessLogic {
    func loadPlaces(latitude: Double, longitude: Double)
    func loadImageTask(for venueId: String) -> Observable<Photo>
    func switchTrackingMood()
    func loadTrackingMood()
}

protocol NearByPlacesDataStore {}

class NearByPlacesInteractor: NearByPlacesBusinessLogic, NearByPlacesDataStore {
    var presenter: NearByPlacesPresentationLogic?
    var worker: PlacesProviderType = NearByPlacesWorker()
    var locationProvider: LocationProviderProtocol?
    private var places: [NearByPlaces.ViewModel.Place] = []
    
    func loadPlaces(latitude: Double, longitude: Double) {
        worker.loadPlaces(latitude: latitude, longitude: longitude, completion: { result in
            switch result {
            case .success(let items):
                self.places = items.map { venueItem  in
                    return NearByPlaces.ViewModel.Place(id: venueItem.id, title: venueItem.name, subtitle: venueItem.location.formattedAddress.first ?? "", image: "")
                }
                self.presenter?.present(places: self.places)
            case .failure(let error):
                self.presenter?.present(error: error)
            }
        })
    }
    
    func loadImageTask(for venueId: String) -> Observable<Photo> {
        worker.loadImageTask(for: venueId)
    }
    
    func switchTrackingMood() {
        let trackingMoodLoaded = worker.loadTrackingMood()
        let trackingMood: TrackingMood
        locationProvider = LocationProvider(delegate: self)
        
        if trackingMoodLoaded == TrackingMood.realtime.title {
            trackingMood = TrackingMood.singleUpdate
        } else {
            trackingMood = TrackingMood.realtime
        }
        
        locationProvider?.startMonitoring(trackingMood: trackingMood)
        worker.saveTrackingMood(trackingMood: trackingMood)
        self.presenter?.present(trackingMood: trackingMood.title)
    }
    
    func loadTrackingMood() {
        let trackingMoodLoaded = worker.loadTrackingMood()
        locationProvider = LocationProvider(delegate: self)
        
        if trackingMoodLoaded == TrackingMood.realtime.title {
            locationProvider?.startMonitoring(trackingMood: TrackingMood.realtime)
        } else {
            locationProvider?.startMonitoring(trackingMood: TrackingMood.singleUpdate)
        }
        self.presenter?.present(trackingMood: trackingMoodLoaded)
    }
}

// MARK: - Location provider delegate
extension NearByPlacesInteractor: LocationProviderDelegate {
    func showErrorMessage() {
        self.presenter?.present(error: Errors.fail)
    }
    
    func didUpdateLocation(location: CLLocation) {
        self.loadPlaces(latitude: location.coordinate.latitude, longitude: location.coordinate.longitude)
    }
}
